<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <!--
    The Group ID represents the main package of your plugin

    The Artifact ID represents the name of your plugin.
    Traditionally, it is suggested to keep this name lowercase.
    If your plugin uses spaces, please replace them with dashes (-) instead.

    The Name represents the full name of your plugin.

    The Version is current version of your plugin. You want to update this continuously.
  -->
  <groupId>me.omegaweapondev</groupId>
  <artifactId>omegawarps</artifactId>
  <name>OmegaWarps</name>
  <version>2.2.2</version>
  <description>OmegaWarps lets your players warp around in style.</description>

  <!--
    Configure some of the Maven settings. We also define our new variables here such as the main class
    or Java version for our plugin.

    You can use those variables in your src/resources folder. See the plugin.yml example below for usage.
  -->
  <properties>
    <!--
      The full path to your plugin's main class, so that Spigot can find and load it.
      This is used in the plugin.yml for automatic input into the file.
    -->
    <main.class>me.omegaweapondev.omegawarps.OmegaWarps</main.class>

    <!--
      Listing the Author or Authors of the plugin. Use in the plugin.yml file.
    -->
    <pl.author>OmegaWeaponDev</pl.author>
    <pl.authors>[UltimaWeapon_]</pl.authors>

    <!--
      Set the Spigot API Version to stop backwards compatibility checks.
    -->
    <pl.apiver>1.13</pl.apiver>

    <!-- The Java version your plugin uses, see bstats.org for what most servers have and use that -->
    <java.version>11.0</java.version>

    <!-- How letters in your code should be saved on your disk, leave to UTF-8 to support all languages -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- Used to force the compiler to use Java JDK 1.8. Can be left out if the IDE has been setup correctly. -->
    <maven.compiler.source>11.0</maven.compiler.source>
    <maven.compiler.target>11.0</maven.compiler.target>
  </properties>

  <!--
    Configure where should Maven look for other libraries and plugins we
    want to use in our plugin. Those libraries and plugins can you then
    reference below in the dependencies section.

    Each repository has two parts - the id and url. The id does not
    really matter, however the URL must contain a valid Maven repository
    where the dependency is "installed" (that's why we call the goal "install"
    because we want to install our plugin on our PC as well so that we can
    use it in our other plugins together without linking it as a dependency).

    By default we use the Spigot repository for Spigot and the central Maven
    repo for many other plugins.
  -->
  <repositories>
    <repository>
      <id>spigotmc-repo</id>
      <url>https://hub.spigotmc.org/nexus/content/groups/public/</url>
    </repository>
    <repository>
      <id>jitpack.io</id>
      <url>https://jitpack.io</url>
    </repository>
    <repository>
      <id>CodeMC</id>
      <url>https://repo.codemc.org/repository/maven-public</url>
    </repository>
  </repositories>

  <!--
    Configure what other libraries or plugins are we going to use in this plugin.
    As a starting point, we are importing the Spigot API.
  -->
  <dependencies>
    <!--
      Import the Spigot API since it's necessary for our plugin
      Make sure you change the version to the latest version you want to use for your plugin.
    -->
    <dependency>
      <groupId>org.spigotmc</groupId>
      <artifactId>spigot-api</artifactId>

      <!-- Change this to the latest version to stay up to date -->
      <version>1.16.5-R0.1-SNAPSHOT</version>

      <!--
        The scope indicates if this library should be packaged together with our plugin
        when we want to publish it.

        Set this to "compile" if you want all classes from this library to be copied
        to your plugin's jar, otherwise set this to "provided".
      -->
      <scope>provided</scope>
    </dependency>

    <!--
      This is where we will add the library to the project. Uses the same process as the above.
      If you followed the cloning tutorial exactly, the below de tails should be the same.

      This will use the jar file that is located in the .m2 folder in your local Maven repo.
    -->
    <dependency>
      <groupId>me.ou</groupId>
      <artifactId>library</artifactId>
      <version>1.6.2</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>com.github.MilkBowl</groupId>
      <artifactId>VaultAPI</artifactId>
      <version>1.7</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.bstats</groupId>
      <artifactId>bstats-bukkit</artifactId>
      <version>1.7</version>
      <scope>compile</scope>
    </dependency>
  </dependencies>

  <!--
    The following allows for the plugin to be built whilst shading the library into it, allowing
    it to be used without turning the library into a plugin that needs to be run along side this one.

    Follow the below exactly as the library needs to be shaded to a UNIQUE directory for each plugin
    you create. Otherwise it can cause class loading errors and in turn, stop the plugin loading/working.
  -->
  <build>
    <finalName>${project.name}-${project.version}</finalName>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>3.2.1</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <createDependencyReducedPom>false</createDependencyReducedPom>
          <relocations>
            <relocation>
              <pattern>me.ou.library</pattern>
              <shadedPattern>${project.groupId}.${project.artifactId}.library</shadedPattern>
            </relocation>
            <relocation>
              <pattern>org.bstats</pattern>
              <shadedPattern>${project.groupId}.${project.artifactId}.bstats</shadedPattern>
            </relocation>
          </relocations>
        </configuration>
      </plugin>
    </plugins>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
  </build>
</project>